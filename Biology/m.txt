int m = strlen(s1->seq);
	int n = strlen(s2->seq);
	char* x = new char[m+1];
	char* y = new char[n+1];
	x[m+1]='\0';
	y[m+1]='\0';
	x = s1->seq;
	y = s2->seq;

	int** L = new int *[m + 1];
	for (int i = 0; i < m + 1; i++)
	{
		L[i] = new int[n + 1];
	}
    /* Following steps build L[m+1][n+1] in bottom up fashion. Note
       that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (x[i - 1] == y[j - 1])
                L[i][j] = L[i - 1][j - 1] + 1;
            else
                L[i][j] = max(L[i - 1][j], L[i][j - 1]);
        }
    }
    // Following code is used to print LCS
    int index = L[m][n];
    // Create a character array to store the lcs string
    char* lcs = new char[index + 1];
    lcs[index] =' '; // Set the terminating character
    int c = 0;
    // Start from the right-most-bottom-most corner and
    // one by one store characters in lcs[]
    int i = m, j = n;
    while (i > 0 && j > 0)
    {
        // If current character in X[] and Y are same, then
        // current character is part of LCS
        if (x[i - 1] == y[j - 1])
        {
            lcs[index - 1] = x[i - 1]; // Put current character in result
            c++;
            i--; j--; index--;     // reduce values of i, j and index
        }
        // If not same, then find the larger of two and
        // go in the direction of larger value
        else if (L[i - 1][j] > L[i][j - 1])
            i--;
        else
            j--;
    }
    return lcs;